const express = require('express');
const router = express.Router();

// joi is used for validation of inputs of users
// The most powerful schema description language and data validator for JavaScript.
const Joi = require('joi');

const books = [
  {
    id: 1,
    title: 'How to Get What You Want',
    author: 'John Gray',
    description: 'Self Improving book',
    price: 10,
    cover: 'soft cover',
  },
  {
    id: 2,
    title: 'Atomic Habits',
    author: 'James Clear',
    description: 'Self Improving book',
    price: 20,
    cover: 'soft cover',
  },
];

/**
 * @desc Get all books
 * @route /api/books
 * @method GET
 * @access public
 */
router.get('/', (req, res) => {
  res.status(200).json(books);
});

/**
 * @desc Get book by id
 * @route /api/books/:id
 * @method GET
 * @access public
 */
router.get('/:id', (req, res) => {
  const book = books.find((b) => b.id === parseInt(req.params.id)); // every thing we bring from req are strings ,to convert we use parseInt()
  if (book) {
    res.status(200).json(book);
  } else {
    res.status(404).json({ message: 'book not found' });
  }
});

/**
 * @desc Create new book
 * @route /api/books
 * @method POST
 * @access public
 */
router.post('/', (req, res) => {
  const { error } = validateCreateBook(req.body);
  if (error) {
    return res.status(400).json({ message: error.details[0].message });
  }

  const book = {
    id: books.length + 1,
    title: req.body.title,
    author: req.body.author,
    description: req.body.description,
    price: req.body.price,
    cover: req.body.cover,
  };

  books.push(book);
  console.log(books);
  res.status(201).json(book); // 201=>created successfully
});

/**
 *
 * @desc Update book by id
 * @route /api/books/:id
 * @method PUT
 * @access Public
 */
router.put('/:id', (req, res) => {
  const { error } = validateUpdateBook(req.body);
  if (error) {
    return res.status(400).json({ message: error.details[0].message });
  }

  const book = books.find((b) => b.id === parseInt(req.params.id));
  if (book) {
    res.status(200).json({ message: 'Book has been updated Successfully' });
  } else {
    res.status(404).json({ message: 'Book not found!' });
  }
});

/**
 *
 * @desc Delete book by id
 * @route /api/books/:id
 * @method DELETE
 * @access Public
 */
router.delete('/:id', (req, res) => {
  const book = books.find((b) => b.id === parseInt(req.params.id));
  if (book) {
    res.status(200).json({ message: 'Book has been deleted Successfully' });
  } else {
    res.status(404).json({ message: 'Book not found!' });
  }
});

// validation during creation of new book
function validateCreateBook(obj) {
  const schema = Joi.object({
    title: Joi.string().trim().min(3).max(200).required(),
    author: Joi.string().trim().min(3).max(200).required(),
    description: Joi.string().trim().min(3).max(500).required(),
    price: Joi.number().min(0).required(),
    cover: Joi.string().trim().required(),
  });

  return schema.validate(obj);
}

// validation during update of existing book
function validateUpdateBook(obj) {
  const schema = Joi.object({
    title: Joi.string().trim().min(3).max(200),
    author: Joi.string().trim().min(3).max(200),
    description: Joi.string().trim().min(3).max(500),
    price: Joi.number().min(0),
    cover: Joi.string().trim(),
  });

  return schema.validate(obj);
}

module.exports = router;
